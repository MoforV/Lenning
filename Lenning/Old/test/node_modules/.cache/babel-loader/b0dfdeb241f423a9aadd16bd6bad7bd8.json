{"remainingRequest":"G:\\lanxin\\Lenning\\Lenning\\Old\\test\\node_modules\\babel-loader\\lib\\index.js!G:\\lanxin\\Lenning\\Lenning\\Old\\test\\api\\header.js","dependencies":[{"path":"G:\\lanxin\\Lenning\\Lenning\\Old\\test\\api\\header.js","mtime":1710846626000},{"path":"G:\\lanxin\\Lenning\\Lenning\\Old\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1730623019534},{"path":"G:\\lanxin\\Lenning\\Lenning\\Old\\test\\node_modules\\babel-loader\\lib\\index.js","mtime":1730623020067}],"contextDependencies":[],"result":["import _MessageBox2 from \"element-ui/lib/theme-chalk/message-box.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _MessageBox from \"element-ui/lib/message-box\";\nimport Vue from 'vue';\nimport axios from 'axios';\nimport { Base64 } from 'js-base64';\nvar instance = axios.create({\n  responseType: \"json\",\n  headers: {\n    'content-type': 'application/x-www-form-urlencoded'\n  }\n}); // 加密token\n\nfunction baseFun() {\n  var token = localStorage.getItem(\"token\");\n  var base64 = Base64.encode(token + ':');\n  return 'Basic ' + base64;\n} // http request 拦截器:是在ajax请求发出之前的操作\n\n\ninstance.interceptors.request.use(function (config) {\n  var token = localStorage.getItem(\"token\");\n\n  if (token) {\n    // 判断是否存在token，如果存在的话，则每个http header都加上token\n    config.headers.Authorization = baseFun();\n  }\n\n  return config;\n}, function (err) {\n  return Promise.reject(err);\n}); //响应拦截：请求发出之后的操作\n\ninstance.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.response) {\n    // console.log(error.response)\n    var ERRS = error.response.status;\n    var MSG = error.response.data.msg.msg;\n    var errdata = ERRS == 401 ? MSG : '服务器发生错误';\n\n    switch (error.response.status) {\n      case 401:\n        // console.log('没有访问权限')\n        _MessageBox.alert(errdata, '提示', {\n          confirmButtonText: '好的',\n          showCancelButton: false,\n          type: 'warning',\n          showClose: false,\n          closeOnClickModal: false\n        }).then(function () {\n          // console.log('去登陆')\n          window.location.href = '/';\n        }).catch(function () {// console.log('取消')        \n        });\n\n        break;\n    }\n  }\n\n  return Promise.reject(error.response.data); // 返回接口返回的错误信息error.response.data\n});\nexport default instance;",{"version":3,"sources":["G:/lanxin/Lenning/Lenning/Old/test/api/header.js"],"names":["Vue","axios","Base64","instance","create","responseType","headers","baseFun","token","localStorage","getItem","base64","encode","interceptors","request","use","config","Authorization","err","Promise","reject","response","error","ERRS","status","MSG","data","msg","errdata","alert","confirmButtonText","showCancelButton","type","showClose","closeOnClickModal","then","window","location","href","catch"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,WAArB;AAEA,IAAIC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC3BC,EAAAA,YAAY,EAAE,MADa;AAE1BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFiB,CAAb,CAAf,C,CAOA;;AACA,SAASC,OAAT,GAAkB;AAChB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,MAAMC,MAAM,GAAGT,MAAM,CAACU,MAAP,CAAcJ,KAAK,GAAC,GAApB,CAAf;AACA,SAAO,WAAWG,MAAlB;AACD,C,CAED;;;AACAR,QAAQ,CAACU,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACE,UAAAC,MAAM,EAAI;AACR,MAAIR,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;AACA,MAAIF,KAAJ,EAAW;AAAG;AACZQ,IAAAA,MAAM,CAACV,OAAP,CAAeW,aAAf,GAA+BV,OAAO,EAAtC;AACD;;AACD,SAAOS,MAAP;AACD,CAPH,EAQE,UAAAE,GAAG,EAAI;AACL,SAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD,CAVH,E,CAYA;;AACAf,QAAQ,CAACU,YAAT,CAAsBQ,QAAtB,CAA+BN,GAA/B,CACI,UAAAM,QAAQ,EAAI;AACR,SAAOA,QAAP;AACH,CAHL,EAII,UAAAC,KAAK,EAAI;AACL,MAAIA,KAAK,CAACD,QAAV,EAAoB;AACzB;AACA,QAAIE,IAAI,GAAGD,KAAK,CAACD,QAAN,CAAeG,MAA1B;AACA,QAAIC,GAAG,GAAGH,KAAK,CAACD,QAAN,CAAeK,IAAf,CAAoBC,GAApB,CAAwBA,GAAlC;AACA,QAAIC,OAAO,GAAGL,IAAI,IAAI,GAAR,GAAcE,GAAd,GAAoB,SAAlC;;AACS,YAAQH,KAAK,CAACD,QAAN,CAAeG,MAAvB;AACI,WAAK,GAAL;AACA;AACA,oBAAWK,KAAX,CAAiBD,OAAjB,EAA0B,IAA1B,EAA+B;AACrCE,UAAAA,iBAAiB,EAAE,IADkB;AAErCC,UAAAA,gBAAgB,EAAC,KAFoB;AAG/BC,UAAAA,IAAI,EAAE,SAHyB;AAI/BC,UAAAA,SAAS,EAAC,KAJqB;AAK/BC,UAAAA,iBAAiB,EAAC;AALa,SAA/B,EAOCC,IAPD,CAOM,YAAM;AACd;AACAC,UAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACD,SAVG,EAUDC,KAVC,CAUK,YAAM,CACd;AACA,SAZG;;AAaA;AAhBJ;AAkBH;;AACD,SAAOpB,OAAO,CAACC,MAAR,CAAeE,KAAK,CAACD,QAAN,CAAeK,IAA9B,CAAP,CAzBK,CAyBwC;AAChD,CA9BL;AAgCA,eAAevB,QAAf","sourcesContent":["import Vue from 'vue';\nimport axios from 'axios'\nimport {Base64} from 'js-base64'\nimport { MessageBox} from 'element-ui'\nlet instance = axios.create({\n\tresponseType: \"json\",\n  headers: {\n    'content-type': 'application/x-www-form-urlencoded'\n  }\n})\n\n// 加密token\nfunction baseFun(){\n  const token = localStorage.getItem(\"token\")\n  const base64 = Base64.encode(token+':')\n  return 'Basic ' + base64\n}\n\n// http request 拦截器:是在ajax请求发出之前的操作\ninstance.interceptors.request.use(\n  config => {\n    let token = localStorage.getItem(\"token\")\n    if (token) {  // 判断是否存在token，如果存在的话，则每个http header都加上token\n      config.headers.Authorization = baseFun();\n    }\n    return config;\n  },\n  err => {\n    return Promise.reject(err);\n  });\n  \n//响应拦截：请求发出之后的操作\ninstance.interceptors.response.use(\n    response => {\n        return response;\n    },\n    error => {\n        if (error.response) {\n\t\t\t// console.log(error.response)\n\t\t\tlet ERRS = error.response.status\n\t\t\tlet MSG = error.response.data.msg.msg\n\t\t\tlet errdata = ERRS == 401 ? MSG : '服务器发生错误'\n            switch (error.response.status) {\n                case 401:\n                // console.log('没有访问权限')\n                MessageBox.alert(errdata, '提示',{\n\t\t\t\t      confirmButtonText: '好的',\n\t\t\t\t      showCancelButton:false,\n\t\t              type: 'warning',\n\t\t              showClose:false,\n\t\t              closeOnClickModal:false\n\t\t\t\t        })\n                .then(() => {\n\t\t\t\t          // console.log('去登陆')\n\t\t\t\t          window.location.href = '/'\n\t\t\t\t        }).catch(() => {\n\t\t\t\t         // console.log('取消')        \n\t\t\t\t        })\n                break;\n            }\n        }\n        return Promise.reject(error.response.data)   // 返回接口返回的错误信息error.response.data\n    });\n\nexport default instance\n"]}]}